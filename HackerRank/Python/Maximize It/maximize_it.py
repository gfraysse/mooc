# Maximize modulo l1^2 + l2^2 ... + lK^2 where lx is one of the member of L

# Constraints:
# 1<= K <= 7
# 1<= M <= 1000
# 1<= N_i <= 7
# 1<= Magnitude of elements in the list <= 10^9

# properties of modulo
# (a + b) % n = [(a % n) + (b % n)] % n
# ab % n = [(a%n)(b%n)]%n

# samples :
# 3 1000
# 2 5 4
# 3 7 8 9 
# 5 5 7 8 9 10 
#
# 3 4
# 10 1 2 3 4 5 6 7 8 9 10 11
# 10 1 2 3 4 5 6 7 8 9 10 11
# 10 1 2 3 4 5 6 7 8 9 10 11
#
# 7 1000
# 7 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000
# 7 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000
# 7 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000
# 7 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000
# 7 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000
# 7 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000
# 7 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000

# 7 1000
# 7 99999999 99999999 99999999 99999999 99999999 99999999 99999999
# 7 99999999 99999999 99999999 99999999 99999999 99999999 99999999
# 7 99999999 99999999 99999999 99999999 99999999 99999999 99999999
# 7 99999999 99999999 99999999 99999999 99999999 99999999 99999999
# 7 99999999 99999999 99999999 99999999 99999999 99999999 99999999
# 7 99999999 99999999 99999999 99999999 99999999 99999999 99999999
# 7 99999999 99999999 99999999 99999999 99999999 99999999 99999999

# 7 867
# 7 6429964 4173738 9941618 2744666 5392018 5813128 9452095
# 7 6517823 4135421 6418713 9924958 9370532 7940650 2027017
# 7 1506500 3460933 1550284 3679489 4538773 5216621 5645660
# 7 7443563 5181142 8804416 8726696 5358847 7155276 4433125
# 7 2230555 3920370 7851992 1176871 610460 309961 3921536
# 7 8518829 8639441 3373630 5036651 5291213 2308694 7477960
# 7 7178097 249343 9504976 8684596 6226627 1055259 4880436

# Expected Output
# 866

K, M = map(int,raw_input().split())
N = []
L = []
L2 = []
orig = []

for i in range(K):
    l = map(int, raw_input().split())
    N.append(l[0])
    orig.append(l[1:])
    orig[-1].sort()
    L.append(map(lambda x:(x * x) % M, orig[-1]))

print "K", K, "M", M, "N",  N, "L", L, "orig", orig

# Algorithme glouton
# TOTAL_MAX = 0
# for i in range(len(K)):
#     total = 0
#     arr = [[0 for _ in range(N[i])] for _ in range(K)]
#     for j in range(N[i])):
#         arr[i][j] = (L[i][j] % M) * (L[i][j] % M)

        
#     total += m * m #(orig[i][idx] * orig[i][idx]) % M

# Algorithme ameliore
total = 0
for i in range(len(N)):
    m = max(L[i])
    # idx = 0
    # print "i", i, "L", L[i], "m", m
    # for j in range(len(L[i]) - 1, -1, -1):
    #     print "j", j
    #     if L[i][j] == m:
    #         idx = j
    #         break
    total += m #(orig[i][idx] * orig[i][idx]) % M
    #print m, idx, total

print total % M
